/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   main.cpp                                           :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: nico <nico@student.42.fr>                  +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2024/02/20 11:43:45 by ncasteln          #+#    #+#             */
/*   Updated: 2024/03/04 17:59:21 by nico             ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "ScalarConverter.hpp"


/*
	TO HANDLE:
	- Empty string
	- Modify stucture to take char and int together (cleaner)
	- handle specials
	- handle limits
	- unisgned char instead of char --?
*/

/*
	.f				OK
	****************************************
	0.f				OK
	0000.f			OK
	00001.f			OK
	-1.f			OK
	****************************************
	0.				OK
	0000.			OK
	00001.			OK
	-1.				OK
	****************************************
	1UL or 1L		???
	-inff +inff		OK
	-inf +inf		OK
	nan nanf		OK
	****************************************
	'c' 0-255		OK
	"42"			OK
	"0.42f"			OK
	"0.42"			OK
	****************************************
	"0.1.2"			OK
	"nothing"		OK
	"1234k"			OK
	"fake.42f"		OK
*/

int main ( int argc, char** argv ) {
	if (argc != 2) {
		std::cerr << "Error: invalid argc" << std::endl;
		return (1);
	}
	ScalarConverter::convert(argv[1]);

	// std::cout << std::endl << "INT" << std::endl;
	// std::cout << std::numeric_limits<int>::min() << std::endl;
	// std::cout << std::numeric_limits<int>::max() << std::endl;

	// std::cout << std::endl << "FLOAT" << std::endl;
	// std::cout << std::numeric_limits<float>::min() << std::endl;
	// std::cout << std::numeric_limits<float>::max() << std::endl;


	// std::cout << std::endl << "DOUBLE" << std::endl;
	// std::cout << std::numeric_limits<double>::min() << std::endl;
	// std::cout << std::numeric_limits<double>::max() << std::endl;

	// // 107822510726914869798092409467721427270124043771874092167566136349389004512323516681460893224006979931760178053381918499819330084109859939387602926013909114145260037202848721324119554242821018312042161044674046216353369005836646065911562987647455250681450039329414041314954006776029510059622530228230036314738246810596484424413248645731374375950964161680480241293518762046681356368775328146755387988717718365128939471953350618850032676073543886733680020743878496570145760903498575712430451020387304948542567024793393228091105260415385289948492039910919461299124916332899179980943803378795220931314669461497059396641523759492858909604899161219449899863848370224866722491489246784102061833646274169695763076324802355879752452537370354338829608627534277400163334340550835370485073745448197547222289752810830208986826330202852599230841680545396879114182976299889645764827652875045628549242651652177507995162596692291149777889623566709566271384820181913483216879958636526376209782850700993372943967846398790249145142227425270063639423279984839767399871544185542015622441549266530145155046854892586202760857618371297633587612153825651296335381416639495165560002641591865548500570526114319529199188079545223946496276356301785808966922264062353828985358675959906470083856871238103295919264948462507689922584193054807636202150890221492205280698420183508405869384938154989094454619778930291135765167754062322782983140334732766039522316034228247175281818188443048809213219335508698733958612760736708666523755556758031714901084773200964243187800700087973460329062789435537435644488519071916164551411557619393996907674151564028265436640267600950875239455073415561358679330660317447209244465135323666476497354008519670407711036405381500734868917983640495706061895350050898409138268695350900667833244725787121.0
	// std::cout << std::endl << "LONG DOUBLE" << std::endl;
	// std::cout << std::numeric_limits<long double>::min() << std::endl;
	// std::cout << std::numeric_limits<long double>::max() << std::endl;
	return (0);
}
